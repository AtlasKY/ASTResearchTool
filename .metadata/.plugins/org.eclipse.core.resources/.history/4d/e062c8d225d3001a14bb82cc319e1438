

import org.codehaus.groovy.ast.ClassCodeVisitorSupport
import org.codehaus.groovy.ast.ClassNode
import org.codehaus.groovy.ast.MethodNode
import org.codehaus.groovy.ast.*
import org.codehaus.groovy.ast.expr.ArgumentListExpression
import org.codehaus.groovy.ast.expr.BinaryExpression
import org.codehaus.groovy.ast.expr.BooleanExpression
import org.codehaus.groovy.ast.expr.ClosureExpression
import org.codehaus.groovy.ast.expr.ConstantExpression
import org.codehaus.groovy.ast.expr.DeclarationExpression
import org.codehaus.groovy.ast.expr.Expression
import org.codehaus.groovy.ast.expr.MapExpression
import org.codehaus.groovy.ast.expr.MethodCallExpression
import org.codehaus.groovy.ast.expr.NamedArgumentListExpression
import org.codehaus.groovy.ast.expr.PropertyExpression
import org.codehaus.groovy.ast.expr.TupleExpression
import org.codehaus.groovy.ast.expr.VariableExpression
import org.codehaus.groovy.ast.stmt.BlockStatement
import org.codehaus.groovy.ast.stmt.BreakStatement
import org.codehaus.groovy.ast.stmt.EmptyStatement
import org.codehaus.groovy.ast.stmt.ExpressionStatement
import org.codehaus.groovy.ast.stmt.ForStatement
import org.codehaus.groovy.ast.stmt.IfStatement
import org.codehaus.groovy.ast.stmt.ReturnStatement
import org.codehaus.groovy.ast.stmt.Statement
import org.codehaus.groovy.ast.stmt.WhileStatement
import org.codehaus.groovy.ast.Parameter
import org.codehaus.groovy.classgen.GeneratorContext
import org.codehaus.groovy.control.CompilePhase
import org.codehaus.groovy.control.SourceUnit
import org.codehaus.groovy.control.customizers.CompilationCustomizer
import org.codehaus.groovy.tools.shell.util.Logger
import org.codehaus.groovy.transform.GroovyASTTransformation
import org.codehause.groovyx.gpars.*


@GroovyASTTransformation(phase = CompilePhase.SEMANTIC_ANALYSIS)
class CTAnalysisAST extends CompilationCustomizer{	
	
	List handlers
	List devices
	List allDecMeths
	MethodVisitor mv
	Logger log
	
	public CTAnalysisAST(){
		
		super(CompilePhase.SEMANTIC_ANALYSIS)
		
		handlers = new ArrayList<Handler>() //keep as arraylist for now for simplicity
		devices = new ArrayList();
		allDecMeths = new ArrayList();
			 
	}
	
	@Override
	void call(SourceUnit source, GeneratorContext context, ClassNode classNode) {
				
	//	println classNode
		
		allDecMeths = classNode.getAllDeclaredMethods()
		
		mv = new MethodVisitor()
		classNode.visitContents(mv)
		
		getStateVariables(classNode)
		
		summary()
	}
	
	void visitMethodCall(MethodCallExpression mce) {
		mv.visitMethodCallExpression(mce)
	}

	//Caller method for getting handler arguments, state accesses, and event informations usage
	//from the handler code
	void getStateVariables(ClassNode cn) {
		
//		println "-----------------------------------------------------"
		
		//println cn.getAllDeclaredMethods()
		//println "Class Node:" + allDecMeths
		
		//
		handlers.each { hdl->
		//	println "Handler Name: " + hdl.name
			
			MethodNode methN = cn.getDeclaredMethods(hdl.name).get(0)
			 
			methN.getParameters().each { prm->
				hdl.addArg(prm.getName())
			}
			
			handlerMNodeHelper(methN, hdl, cn)
			
			hdl.calledMethods.each { mt->
				println mt.method
				if(cn.getDeclaredMethods(mt.method).size()>0) {
					methN = cn.getDeclaredMethods(mt.method).get(0)
					handlerMNodeHelper(methN, hdl, cn)
				}
			}
		
		}
	}
	
	//Helper method to call recursive action for getting state and event information 
	void handlerMNodeHelper(MethodNode mn, Handler hdl, ClassNode cn) {
				
		if(mn!=null) {
		//	println mn.getName()
			
			BlockStatement block = (BlockStatement) mn.getCode()
		
			block.getStatements().each { st ->
			
				stateRecurse(st, hdl, cn)
			}
		}
	}
	
	void stateRecurse(Statement st, Handler hdl, ClassNode cn) {
		
		if(st instanceof BlockStatement) {
			st.getStatements().each { bst->
				stateRecurse(bst, hdl, cn)
			}
		}
		else if(st instanceof IfStatement) {
			Statement est = new ExpressionStatement((Expression)st.getBooleanExpression())
			stateRecurse(est, hdl, cn)
			stateRecurse(st.getIfBlock(), hdl, cn)
			stateRecurse(st.getElseBlock(), hdl, cn)
		}
		else if(st instanceof ExpressionStatement || st instanceof ReturnStatement) {
			Expression exp = st.getExpression()
			
			hdl.args.each { arg->
				if(hdl.args.size()>0 && exp.getText().contains(arg)) {
					hdl.addEvtProp(exp.getText())
				//	println "contain evt "+ exp.getText()
				}
			}
			
			if(exp instanceof MethodCallExpression) {
				def mname = exp.getMethodAsString()
				hdl.addMethodCall(exp)
				
				//SCHEDULED EXECUTION WITH RUNIN
				if(exp.getText().toLowerCase().contains("runin")) {
					def schMeth = exp.getArguments().getAt(1).getText()
					println "Runin: " + schMeth
					def mn = cn.getDeclaredMethods(schMeth).get(0)
					println mn
					handlerMNodeHelper(mn, hdl, cn)
				}
				if(exp.getText().contains("sendSms") || exp.getText().contains("sendPush")
					|| exp.getText().contains("sendNotificationToContacts")) {
					hdl.setMsg(true)
				}
				
				if(cn.getDeclaredMethods(mname).size()>0)
					handlerMNodeHelper(cn.getDeclaredMethods(mname).get(0), hdl, cn)
			} 
			else if(exp instanceof BinaryExpression) {
				if(exp.getLeftExpression().text.contains("state")) {
//					println "Write State: " + exp.text
					hdl.addWriteState(exp.getLeftExpression().getText())
				}
				
				if(exp.getRightExpression().text.contains("state")) {
//					println "Read State: " exp.text
					hdl.addReadState(exp.getRightExpression().getText())
				}
			}
			else if(exp instanceof BooleanExpression) {
				Expression xp = exp.getExpression()
				if(xp instanceof MethodCallExpression) {
					def mname = xp.getMethodAsString()
					hdl.addMethodCall(xp)
	//				println "Method Target: " + mname
					if(cn.getDeclaredMethods(mname).size()>0)
						handlerMNodeHelper(cn.getDeclaredMethods(mname).get(0), hdl, cn)
				}
			}
			else if(exp instanceof PropertyExpression) {
				hdl.addReadState(exp.getText())
			}
		}
		
	}
		
	class MethodVisitor extends ClassCodeVisitorSupport{
		
		
		public MethodVisitor( ) {
		}
		
		/*
		@Override
		void visitPropertyExpression(PropertyExpression ve) {
			
			if(ve.getText().contains("state."))
				println ve.getText()
		}
		*/
		/*
		@Override
		void visitBinaryExpression(BinaryExpression bex) {
			if(bex!=null) {
			if(bex.getLeftExpression().text.contains("state")) {
				println "Write State: " + bex.text
			}
			
			if(bex.getRightExpression().text.contains("state")) {
				println "Read State: " bex.text
			}
			}
		}
		*/
		
		@Override
		void visitIfElse(IfStatement ifs) {
		//	println "In Ifelse visitor: " + ifs.toString()
			if(ifs.getIfBlock() instanceof ExpressionStatement) {
				Expression exp = ifs.getIfBlock().getExpression()
				if(exp instanceof MethodCallExpression) {
			//		println "Methodcall exp: " + exp.getMethodAsString()
					visitMethodCallExpression(exp)
				}
			}else {
				BlockStatement bs = (BlockStatement) ifs.getIfBlock()
				bs.getStatements().each { st->
					if(st instanceof ExpressionStatement) {
						Expression exp = st.getExpression()
						if(exp instanceof MethodCallExpression) {
							visitMethodCallExpression(exp)
						}
					}
				}
			}
			if(!ifs.getElseBlock() instanceof EmptyStatement) {
				if(ifs.getIfBlock() instanceof ExpressionStatement) {
					Expression exp = ifs.getIfBlock().getExpression()
					if(exp instanceof MethodCallExpression) {
						visitMethodCallExpression(exp)
					}
				}else {
					bs = (BlockStatement) ifs.getElseBlock()
					bs.getStatements().each { st->
						if(st instanceof ExpressionStatement) {
							Expression exp = st.getExpression()
							if(exp instanceof MethodCallExpression) {
								visitMethodCallExpression(exp)
							}
						}
					}
				}
			}
		}
		
		
		//Visitor for MEthod Call Expressions
		//
		@Override
		public void visitMethodCallExpression(MethodCallExpression mce) {
						
			def mceText
			
			//Store the name of the method called as a string
			if(mce.getMethodAsString() == null)
			{
				mceText = mce.getText()
			}else
				mceText = mce.getMethodAsString()
				
//			println(mceText)
			
			//INPUT METHOD HANDLER
			if(mceText.equals("input")) {

				//if the method has more than zero arguments
				if(mce.getArguments().toList().size() > 0) {
					
					//get the list of arguments
					def args = mce.getArguments()
					
					def dname //device name assoc. w/ the handler
					List dcap = new ArrayList() //device capabilities requested
					def isDevice = false //if the input is a device input or a value/mode input
					
					//for each argument for the input method call
					args.each { arg->
						
						//if argument is a constant expression
						//if it doesn't contain capabilty request and not a map expression, is the name of the input/device variable
						//if it contains capabilty request, then input is a device, store the requested cap in the cap list
						//if input is a device, then create a new device object and add to devices list
						if(arg instanceof ConstantExpression) {
							if(!arg.getText().contains("capability.")) {
								//print "Device Name: "
								dname = arg.getValue()
							}else {
//								print "Device Cap: " 
								isDevice = true
								dcap.add(arg.getValue())
							}							
						} 
					}
					if(isDevice)
						devices.add(new Device(dname, dcap))	
				}
			}
			
			//SUBSCRIPTION HANDLER
			if(mceText.equals("subscribe")) {
				
				List arglist = mce.getArguments().toList()
				
			//	println "Handler Subs: " + mce.getText()
				
				def hname
				def dname
				def ename
				
				if(arglist.get(0) instanceof VariableExpression){
					
					VariableExpression varex = (VariableExpression) arglist.get(0)
					dname = varex.getName()
					//println "Dev Name: "
				
					}
				
				if(arglist.get(1) instanceof ConstantExpression){
					
					ConstantExpression conex = (ConstantExpression) arglist.get(1)
					
					ename = conex.getValue()
				
					}
				
				if(arglist.get(2) instanceof VariableExpression){
					
					VariableExpression varex = (VariableExpression) arglist.get(2)
					
					hname = varex.getName()
				} else if(arglist.get(2) instanceof ConstantExpression) {
					ConstantExpression conex = (ConstantExpression) arglist.get(2)
					
					hname = conex.getValue()
				
				}
				
		//		println "Handler: " + hname + " " + dname + " " + ename
				
				handlerAdder(new Handler(hname, dname, dname + "." + ename))
				
				/*
				if(allDecMeths.contains(hname)) {
					println "Handler Method Node: " + allDecMeths.get(allDecMeths.indexOf(hname))
				}
				*/
				
			}
			
			if(mceText.equals("schedule")) {
//				println "Schedule: " + mce.getArguments()
				List arglist = mce.getArguments().toList()
				
				def hname = ((ConstantExpression) arglist.get(1)).getValue()
				def dname = "Scheduler"
				def ename = "Schedule on " + ((VariableExpression)arglist.get(0)).getName()
				
				handlers.add(new Handler(hname, dname, ename))
				
			}
			
			//recurse on the method expression to get the inner methods	
			super.visitMethodCallExpression(mce)
		}
		
		@Override
		protected SourceUnit getSourceUnit() {
			return null;
		}
	}
	
	//Printer Method
	public void summary() {
		
		println "-------------------------------------------------------"
		
		println "Devices:"
		devices.each{ dev->
			println(dev)
		}
		
		println "-------------------------------------------------------"
		
		println "Handlers: "
		handlers.forEach { hand ->
			println(hand)
		}
		println "-------------------------------------------------------"
		
	}
	
	class Device{
		
		//Device Name
		String devName
		//Capabilty List
		List cap
		
		public Device(String n, List c) {
			devName = n
			cap = new ArrayList()
			cap = c
		}
		
		@Override
		public String toString() {
			return "Device Name: " + devName + " Capability Req: " + cap + ""
		}
	}
	
	public void handlerAdder(Handler hdl) {
		
		if(handlers.contains(hdl)) {
			handlers.get(handlers.indexOf(hdl)).addEvent(hdl.eventTriggers.get(0))
		}else {
			handlers.add(hdl)
		}
		
	}
	
}
