
import Handler.Method
import Handler.State
import org.codehaus.groovy.ast.ClassNode
import org.codehaus.groovy.ast.builder.AstBuilder
import org.codehaus.groovy.ast.expr.ConstantExpression
import org.codehaus.groovy.control.CompilePhase
import org.codehaus.groovy.control.CompilerConfiguration

class ConsistencyAnalysis {
	
	List handlers
	
	List results
	
	List unsafeResults
	
	boolean DEBUG = false
	boolean LONG_OUT = false
	
	//enum for the state result information passing and recording
	enum StateRes{
		NO_STATE,
		SAFE_READ,
		SAFE_WRITE,
		SAFE_RW,
		UNSAFE_R,
		UNSAFE_W,
		UNSAFE_RW
	}
	
	//an enum for the scheduling check for state accesses
	enum Schedule{
		OW_TRUE,
		OW_FALSE,
		NO_SCH
	}
	
	//Enum for the state write flag checks in writeCount() method
	enum StateWFlag{
		SINGLE,
		MULTI_W_SAME_VAL,
		MULTI_W_DIFF_VAL
	}
	
	public ConsistencyAnalysis(List hdls) {
		
		handlers = new ArrayList()
		handlers = hdls
		
		results = new ArrayList<AnalysisResult>()
		unsafeResults = new ArrayList<AnalysisResult>()
		
	}
	
	void analyse() {
		
		println "Analysis"
		
		for(int i = 0; i < handlers.size(); i++) {
			
			for(int j = i; j < handlers.size(); j++) {
				
				if(DEBUG) println "Handlers: " + handlers.get(i).name + " " + handlers.get(j).name
				
				//starts by calling the handler crossed with itself
				AnalysisResult ar = analysisHelper(handlers.get(i), handlers.get(j))
				results.add(ar)
				if(!ar.isSafe)
					unsafeResults.add(ar)

			}	
		}
	}
	
	void print() {
		
		println "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
		
		if(LONG_OUT) {
		println "\n_______________SAFE__CASES_______________\n"
		
			results.each { res->
				if(res.isSafe)
					println res
			}
		}
		
		if(unsafeResults.size()>0) {
			println "\n_______________UNSAFE__CASES_______________\n"
			unsafeResults.each { res->
				println "<><><><><><><>\n"
				println res
			}
		} else {
			println "\n_______________NO__UNSAFE__CASES_______________\n"
		}
	}
	
	
	AnalysisResult analysisHelper(Handler h1, Handler h2) {
		
		AnalysisResult ar = new AnalysisResult(h1, h2)
		
		ar = stateAnalysis(ar, h1, h2)
		
		ar = userImpactAnalysis(ar, h1, h2)
		
		return ar
	}
	
	AnalysisResult stateAnalysis(AnalysisResult ar, Handler h1, Handler h2) {
		
		StateRes s1 = StateRes.NO_STATE
		StateRes s2 = StateRes.NO_STATE
		
		if(h1.writeStates.size() > 0 && h1.readStates.size() > 0) {
			s1 = StateRes.SAFE_RW
		} else if(h1.writeStates.size() > 0) {
			s1 = StateRes.SAFE_WRITE
		} else if(h1.readStates.size() > 0) {
			s1 = StateRes.SAFE_READ
		} 
		
		if(h2.writeStates.size() > 0 && h2.readStates.size() > 0) {
			s2 = StateRes.SAFE_RW
		} else if(h2.writeStates.size() > 0) {
			s2 = StateRes.SAFE_WRITE
		} else if(h2.readStates.size() > 0) {
			s2 = StateRes.SAFE_READ
		} 

		//IF both handler are reading only then they are safe
		
		//if h1 writes state check if the states it writes to is read by the other handler
		//if so set both to unsafe
		// if not leave as is
		if((s1 == StateRes.SAFE_WRITE || s1 == StateRes.SAFE_RW)) {
			h1.writeStates.each { ws->
			//	println ws.path + " " + ws
				ar = stateWriteHelper(ar, h2 ,ws)
				if(!ar.flag) {
								
					//set the state results to unsafe
					if(s1 == StateRes.SAFE_WRITE)
						s1 = StateRes.UNSAFE_W
					else if(s1 == StateRes.SAFE_RW)
						s1 = StateRes.UNSAFE_RW
						
					if(s2 == StateRes.SAFE_READ) 
						s2 = StateRes.UNSAFE_R
					else if(s2 == StateRes.SAFE_RW)
						s2 = StateRes.UNSAFE_RW
				}
				
				if(s2 == StateRes.SAFE_WRITE || s2 == StateRes.SAFE_RW) {
					ar = stateWriteHelper(ar, h2 ,ws)
					if(!ar.flag) {
						
						//println "state write helper passed false\n"
						//set the state results to unsafe
						if(s1 == StateRes.SAFE_WRITE)
							s1 = StateRes.UNSAFE_W
						else if(s1 == StateRes.SAFE_RW)
							s1 = StateRes.UNSAFE_RW

						if(s2 == StateRes.SAFE_WRITE)
							s2 = StateRes.UNSAFE_W
						else if(s2 == StateRes.SAFE_RW)
							s2 = StateRes.UNSAFE_RW
					}
				}
			}
		}
		
		//Repeat of the above check for 2nd handler
		if((s2 == StateRes.SAFE_WRITE || s2 == StateRes.SAFE_RW)) {
			h2.writeStates.each { ws->
				ar = stateReadHelper(ar, h1 ,ws)
				if(!ar.flag) {
							
					//set the state results to unsafe
					if(s2 == StateRes.SAFE_WRITE)
						s2 = StateRes.UNSAFE_W
					else if(s2 == StateRes.SAFE_RW)
						s2 = StateRes.UNSAFE_RW
						
					if(s1 == StateRes.SAFE_READ) 
						s1 = StateRes.UNSAFE_R
					else if(s1 == StateRes.SAFE_RW)
						s1 = StateRes.UNSAFE_RW
				}
				if(s1 == StateRes.SAFE_WRITE || s1 == StateRes.SAFE_RW) {
					ar = stateWriteHelper(ar, h1 ,ws)
					if(!ar.flag) {
					//	println "state write helper passed false\n"
						//set the state results to unsafe
						if(s2 == StateRes.SAFE_WRITE)
							s2 = StateRes.UNSAFE_W
						else if(s2 == StateRes.SAFE_RW)
							s2 = StateRes.UNSAFE_RW

						if(s1 == StateRes.SAFE_WRITE)
							s1 = StateRes.UNSAFE_W
						else if(s1 == StateRes.SAFE_RW)
							s1 = StateRes.UNSAFE_RW
					}
				}
			}
		}
		
		//println "S1: " + s1 + " S2: " + s2
		
		ar.stateRes(s1, s2)
		
		return ar
	}
	
	//checks for a given write state variable and the crossed handler's read states
	//return true if determined safe
	AnalysisResult stateReadHelper(AnalysisResult ar, Handler h, State st) {
		
		//if there are read states in the handler
		//cycle over each of them and check if modify the same state field
		
		ar.flag = true
		
		//no read state is safe for write
		if(h.readStates.size()>0) {
			
			h.readStates.each { rs->
			//	println "" + rs + " " + rs.path
				
				//does it modify the same state field?
				//if different fields are accessed then safe
				//if rs equals st then check
				if(rs.equals(st) && !(rs.path.contains("so:") || st.path.contains("so:"))) {
					
					if(h.name.equals("garageDoorContact")) {
						println 
					}
					//If it is not a safely scheduled write then check
					//if schedule is safe then safe
					if(stateSchSafe(st) == Schedule.NO_SCH) {
						
							ar.readWriteFlag = true
							
							//if it is a constant value that is set to the field
							//return safe
							if(!(st.writeExp instanceof ConstantExpression)) {
								ar.isSafe = false
								ar.flag = false//not safe with variable modifications
								ar.varSetFlag = true //check the variable set to state field flag
							}
							
							if(rs.boolRead) {
								if(!(rs.readExp instanceof ConstantExpression)) {
									if(rs.readExp.getText().contains("now") || rs.readExp.getText().contains("time")) {
										//if inside a time dependent conditional block
										ar.flag = false
										ar.timeCondFlag = true
										ar.isSafe = false
									}
								}
							}
							
					} else if(stateSchSafe(st) == Schedule.OW_FALSE) {
						//if unsafe scheduling
						ar.flag = false
						ar.isSafe = false
						ar.schFlag = true //check the no overwrite scheduling flag
					}
					
					if(timeCheck(st)) {
						//if inside a time dependent conditional block
						ar.flag = false
						ar.timeCondFlag = true
						ar.isSafe = false
					}
				} 
			}
		} 
		
		return ar
	}
	
	AnalysisResult stateWriteHelper(AnalysisResult ar, Handler h, State st) {
		//if there are read states in the handler
		//cycle over each of them and check if modify the same state field
		
		ar.flag = true
			
		h.writeStates.each { ws->
		
			
			//does it modify the same state field?
			//if different fields are accessed then safe
			//if ws equals st then check
			if(ws.equals(st)) {
				
				//If it is not a safely scheduled write then check
				//if schedule is safe then safe
				if(stateSchSafe(st) == Schedule.NO_SCH) {
					
					//does it have more than one unscheduled write to the same field
					if(writeCount(h, st) != StateWFlag.MULTI_W_DIFF_VAL) {
						
						if(DEBUG) {
							println "State: " + st + " " + st.writeVal
							println "State Exp: " + st.writeExp
							println !(st.writeExp instanceof ConstantExpression)
						}
						//if it is a constant value that is set to the field
						//return safe
						if(!(st.writeExp instanceof ConstantExpression)) {
							ar.flag = false//not safe with variable modifications
							ar.varSetFlag = true //check the variable set to state field flag
							ar.isSafe = false
						}
					} 
					else {
						ar.flag = false //not safe with multiple unscheduled modifications
						ar.multModsFlag = true //check the multipl modification flag
						ar.isSafe = false
					}
				} else if(stateSchSafe(st) == Schedule.OW_FALSE) {
					//if unsafe scheduling
					ar.flag = false
					ar.isSafe = false
					ar.schFlag = true //check the no overwrite scheduling flag
				} 
				
				if(timeCheck(st)) {
					//if inside a time dependent conditional block
					ar.flag = false
					ar.isSafe = false
					ar.timeCondFlag = true
				}
				
			} 
		}
		
		return ar
	}
	
	//If there are multiple accesses to the same field but they all set the same value, 
	//then fine as no race condition happens
	//returns a StateWFlag enum
	StateWFlag writeCount(Handler h, State s) {
		
		//number of writes to the state field
		int i = 0
		
		//if all the writes are same value setting if multiple writes happens
		//to the same field
		boolean sameVal = true
		
		h.writeStates.each { ws ->
			if(s.equals(ws)) {
				if(stateSchSafe(ws) == Schedule.NO_SCH)
					i++
				if(s.writeVal.equals(ws.writeVal))
					sameVal = false
			}
		}
//		println "Write Count: " + i + " " + s
		if(i == 1)
			return StateWFlag.SINGLE
		else if(i > 1 && sameVal)
			return StateWFlag.MULTI_W_SAME_VAL
		else
			return StateWFlag.MULTI_W_DIFF_VAL 	
		
	}
		
	//Returns true if the state is inside a time related conditional
	//false if not
	boolean timeCheck(State st) {
		if(st.getPath().contains("t-")) {
			return true
		} else {
			return false
		}
	}
	
	//return 0 if safe scheduler with overwrite
	//return 1 if unsafe no overwrite scheduling
	//return 2 if no scheduling
	Schedule stateSchSafe(State s) {
		
		if(s.path.contains("so:")) {
			return Schedule.OW_TRUE //safe overwrite scheduler
		} else if(s.path.contains("sf:")) {
			return Schedule.OW_FALSE //unsafe no overwrite scheduler
		} else {
			return Schedule.NO_SCH //no scheduler
		}
		
	}
	
	
	enum UImpact{
		SAFE,
		UNS_NOTIF,
		UNS_DEVICE_MOD,
		UNS_DEV_MOD_NOTIF
	}
	
	AnalysisResult userImpactAnalysis(AnalysisResult ar, Handler h1, Handler h2) {
		
		//if any of the two uses notifications
		if(h1.hasMsg) {
			ar = notifAnalysis(ar, h1, 1)
		}
		if(h2.hasMsg) {
			ar = notifAnalysis(ar, h2, 2)
		}
		if(DEBUG) println "H1: " + h1.unSch + " sch: " + h1.isSch
		if(DEBUG) println "H2: " + h2.unSch + " sch: " + h2.isSch
		if(h1.schMeths.size()>0 && h2.schMeths.size()>0) {
			if(h1.unSch && h2.isSch) {
				ar = unschHelper(ar, h1, h2, 1)
			}
			if(h2.unSch && h1.isSch) {
				ar = unschHelper(ar, h2, h1, 2)
			}
		}
		
		//if both of the handlers modifies a device
		//check if any two methods in the handlers modifies the same device
		if(h1.devMethods.size()>0 && h2.devMethods.size()>0) {
			h1.devMethods.each{ m ->
				h2.devMethods.each { m2->
					
					//oops they modify the same device
					if(m.getRec().equals(m2.getRec())) {
						//println "Call to same device: " + m.getRec()
						
						//they call the same method, if the method outcome is a fixed
						//modification like switch.on(), then we're good
						if(m.getM().equals(m2.getM())) {
							
							//both have arguments
							if(m.arguments.size()>0 && m2.arguments.size()>0) {
								int i = 0
								//iterate over the arguments
								while(i < m.arguments.size() && i < m2.arguments.size()) {
									
									//if arguments are not the same
									if(m.arguments.get(i) != m2.arguments.get(i)) {
										ar.devMultModAdd(m, 1)
										ar.devMultModAdd(m2, 2)
										ar.isSafe = false
									}
									
									//if the arguments are same but they pass a variable as a modification
									if(!(m.arguments.get(i) instanceof ConstantExpression)) {
										ar.varArgModAdd(m, 1)
										ar.isSafe = false
									}
									if(!(m2.arguments.get(i) instanceof ConstantExpression)) {
										ar.varArgModAdd(m2, 2)
										ar.isSafe = false
									}
									
									i++
								}
							}
						}
						else {
							//different methods call to the same device, different outcomes
							ar.devMultModAdd(m, 1)
							ar.devMultModAdd(m2, 2)
							ar.isSafe = false
						}
						
						//Check for event value conditional dev modification
						if(m.callPath.contains("e-")) {
							ar.devEvtCondAdd(m, 1)
							ar.isSafe = false
						}
						if(m2.callPath.contains("e-")) {
							ar.devEvtCondAdd(m2, 2)
							ar.isSafe = false
						}
						
						//Check for state value conditional device modification
						if(m.callPath.contains("s-")) {
							ar.devStatCondAdd(m, 1)
							ar.isSafe = false
						}
						if(m2.callPath.contains("s-")) {
							ar.devStatCondAdd(m2, 2)
							ar.isSafe = false
						}
						
						//Check for time conditional modification for the methods
						if(m.callPath.contains("t-")) {
							ar.devTimeCondAdd(m, 1)
							ar.isSafe = false
						}
						if(m2.callPath.contains("t-")) {
							ar.devTimeCondAdd(m2, 2)
							ar.isSafe = false
						}
					}
				}
			}
		} 
		 
		return ar
	}
	
	AnalysisResult unschHelper(AnalysisResult ar, Handler h1, Handler h2, int hIndex) {
		
		//if handler is unscheduling
		//then check if it is unscheduling a certain method call
		//if so check if it matches any scheduling of the other handler
		//if an unschedule matches another handler's scheduling, flag inconsistency
		//if unscheduling is a general call and if the other handler schedules anything
		//then flag as inconsistent
		if(h1.unSch) {
			if(DEBUG) println "Unsch"
			h1.schMeths.each { sm->
				if(sm.method.contains("unsch")) {
					if(DEBUG) println "Meth Unsch"
					if(sm.arguments.size() > 0) {
						if(DEBUG) println "Arg Size"
						String ag = sm.arguments.getAt(0).getText()
						if(DEBUG) println "Arg: " + ag
						h2.schMeths.each { h2m->
							if(DEBUG) println "h2 args"
							h2m.arguments.each { arg->
								if(DEBUG) println "H2Arg: " + arg.getText()
								if(arg.getText().equals(ag)) {
									ar.unSchConflict = true
									ar.isSafe = false
									ar.unSchH = hIndex
								}
							}
						}
					}
					else {
						ar.unSchConflict = true
						ar.isSafe = false
						ar.unSchH = hIndex
					}
				}
			}
		}
		
		return ar
		
	}
	
	//Safe if the notifications are scheduled execution
	AnalysisResult notifAnalysis(AnalysisResult ar, Handler h, int hIndex) {
		
		h.calledMethods.each{ m->
			if(m.method.contains("sendNotif") || m.method.contains("sendSms") 
				|| m.method.contains("sendPush")) {
				
				if(DEBUG) println m.method + " " + m.callPath
				
				if(m.callPath.contains("so:")) {
					ar.setMsgFlags(hIndex, true)
				}
				else if(m.callPath.contains("sf:")){
					ar.nOverWrite = true
					ar.setMsgFlags(hIndex, false)
				}
				else {
					ar.setMsgFlags(hIndex, false)
				}
				
			}
		}
		
		return ar
	}

	
	//An object to store the result of the analysis
	//The handlers involved hdl1 and hdl2
	//The issues come across
	class AnalysisResult{
		
		Handler hdl1
		Handler hdl2
		
		//boolean flag to use during checks and keep the modifications
		//to other flag instances consistent within the object
		boolean flag
		
		boolean isSafe
		
		//Device Modification Safety Flags
		boolean haveDevMod
		List devTimeCond //device modification is under a time dependent conditional block
		List devEvtCond //device modification is under an event value dependent conditional block
		List devStatCond //device modification is under a sate value dependent conditional block
		List devMultMod //multiple different device modification calls to the same device
		List varArgMod //device is modified with a variable, event, or state value, i.e. different modifications possible
		
		//Notification safety flags
		boolean h1Msg
		boolean h1MsgSafe
		boolean h2Msg
		boolean h2MsgSafe
		boolean nOverWrite
		
		//Schedule vs Unschedule conflict
		boolean unSchConflict
		int unSchH
		
		//Output flags
		boolean schFlag //schedule overwrite false flag 
		boolean multModsFlag //multiple modification of the same field flag
		boolean varSetFlag //a variable is set to the state field
		boolean timeCondFlag //a time conditional modification of the state field
		boolean readWriteFlag //a flag for when the methods both read and write to the same state field
		
		int stateMod
		int usrImp
		int deviceMod
		
		String result
		String stateStr
		String usrImpStr
		
		public AnalysisResult(Handler h1, Handler h2) {
			
			hdl1 = h1
			hdl2 = h2
			result = ""
			result += "Handler1: " + hdl1.name + " VS Handler2: " + hdl2.name + "\n"
			stateStr = ""
			usrImpStr = ""
			
			flag = true
			
			haveDevMod = false
			devTimeCond =  new ArrayList<String>()
			devEvtCond =  new ArrayList<String>()
			devStatCond =  new ArrayList<String>()
			devMultMod =  new ArrayList<String>()
			varArgMod =  new ArrayList<String>()
		
			
			h1Msg = false
			h1MsgSafe = false
			h2Msg = false
			h2MsgSafe = false
			nOverWrite = false
			
			unSchConflict = false
			unSchH = 0
			
			schFlag = false
			multModsFlag = false
			varSetFlag = false
			timeCondFlag = false
			readWriteFlag = false
			
			isSafe = true
		}
		
		void setMsgFlags(int hdlIndex, boolean isSch) {
			
			if(hdlIndex == 1) {
				h1Msg = true
				h1MsgSafe = isSch
			}
			else {
				h2Msg = true
				h2MsgSafe = isSch
			}
			if(!isSch) {
				isSafe = false
			}
		}
		
		void stateRes(StateRes h1, StateRes h2) {
			
			//println "stateRes: " + h1 + " " + h2			
			if(h1 == StateRes.NO_STATE && h2 == StateRes.NO_STATE) {
				stateStr += "STATE SAFE!\nNo state usage in the handlers " 
				stateStr += "\n" + hdl1.name + " " + hdl2.name + "\n"
			}
			else if(h1 <= StateRes.SAFE_RW && h2 <= StateRes.SAFE_RW) {
				stateStr += "STATE SAFE!\n"
				switch(h1) {
					case StateRes.NO_STATE:
						stateStr += "Handler 1 does not use state\n"
						break;
					case StateRes.SAFE_READ:
						stateStr += "Handler 1 reads state variables "
						stateStr += readHelper(hdl1)
						break;
					case StateRes.SAFE_WRITE:
						stateStr += "Handler 1 writes state variables "
						stateStr += writeHelper(hdl1)
						break;
					case StateRes.SAFE_RW:
						stateStr += "Handler 1 reads state variables "
						stateStr += readHelper(hdl1)
						stateStr += " writes state variables "
						stateStr += writeHelper(hdl1)
						break;
				}
				stateStr += "\n"
				switch(h2) {
					case StateRes.NO_STATE:
						stateStr += "Handler 2 does not use state"
						break;
					case StateRes.SAFE_READ:
						stateStr += "Handler 2 reads state variables "
						stateStr += readHelper(hdl2)
						break;
					case StateRes.SAFE_WRITE:
						stateStr += "Handler 2 writes state variables "
						stateStr += writeHelper(hdl2)
						break;
					case StateRes.SAFE_RW:
						stateStr += "Handler 2 reads state variables "
						stateStr += readHelper(hdl2)
						stateStr += " writes state variables "
						stateStr += writeHelper(hdl2)
						break;
				}
				stateStr += "\n"
			} else {
				stateStr += "POSES STATE CONSISTENCY RISKS!\n"
				stateStr += stateFlagChecks()
				switch(h1) {
					case StateRes.UNSAFE_R:
						stateStr += "Handler 1 reads state variables "
						stateStr += readHelper(hdl1)
						break;
					case StateRes.UNSAFE_W:
						stateStr += "Handler 1 writes state variables "
						stateStr += writeHelper(hdl1)
						break;
					case StateRes.UNSAFE_RW:
						stateStr += "Handler 1 reads state variables "
						stateStr += readHelper(hdl1)
						stateStr += " writes state variables "
						stateStr += writeHelper(hdl1)
						break;
				}
				stateStr += "\n"
				switch(h2) {
					case StateRes.UNSAFE_R:
						stateStr += "Handler 2 reads state variables "
						stateStr += readHelper(hdl2)
						break;
					case StateRes.UNSAFE_W:
						stateStr += "Handler 2 writes state variables "
						stateStr += writeHelper(hdl2)
						break;
					case StateRes.UNSAFE_RW:
						stateStr += "Handler 2 reads state variables "
						stateStr += readHelper(hdl2)
						stateStr += " writes state variables "
						stateStr += writeHelper(hdl2)
						break;
				}
				stateStr += "\n"
			}
		}
		
		String stateFlagChecks() {
			String str = ""
			if(schFlag) {
				str += "Schedule Overwrite is set to false! Queued execution of modifications!\n"
			}
			if(multModsFlag) {
				str += "Multiple unscheduled writes to the same state field!\n"
			}
			if(varSetFlag) {
				str += "A variable value is set to a state field, might pose inconsistency risks!\n"
			}
			if(timeCondFlag) {
				str += "The modification is inside a conditional block that is dependent on time information.\n"
			}
			if(readWriteFlag) {
				str += "One handler writes to a state field the other reads!\n"
			}
			return str
		}
		
		String readHelper(Handler h) {
			String str = ""
			
			h.readStates.each { s-> 
				if(s.path.contains("b:"))
					str += " boolean "
				
				if(s.path.contains("so:") || s.path.contains("sf:"))
					str += " schedule "
										
				str += "" + s + "; "
			}
			
			return str
		}
		
		String writeHelper(Handler h) {
			String str = ""
			
			h.writeStates.each { s->
				if(s.path.contains("b:"))
					str += " boolean "
				
				if(s.path.contains("so:") || s.path.contains("sf:"))
					str += " schedule "
					
				str += "" + s + "; "
			}
			
			return str
			
		}

		
		boolean getDevMultMod() {
			if(devMultMod.size()>0)
				return true
			else
				false
		}
		
		boolean getDevTimeCond() {
			if(devTimeCond.size()>0)
				return true
			else
				false
		}
		
		boolean getDevEvtCond() {
			if(devEvtCond.size()>0)
				return true
			else
				false
		}
		
		boolean getDevStatCond() {
			if(devStatCond.size()>0)
				return true
			else
				false
		}
		
		boolean getVarArgMod() {
			if(varArgMod.size()>0)
				return true
			else
				false
		}
		
		void usrImpFlagChecks() {
			
			if(h1Msg && !h1MsgSafe) {
				usrImpStr += "Handler 1 may send duplicate notifications to user. "
				if(nOverWrite) {
					usrImpStr += "Schedule overwrite is set to FALSE."
				} else {
					usrImpStr += "No scheduling for messages."
				}
				usrImpStr += "\n"
			}
			if(h2Msg && !h2MsgSafe) {
				usrImpStr += "Handler 2 may send duplicate notifications to user. "
				if(nOverWrite) {
					usrImpStr += "Schedule overwrite is set to FALSE."
				} else {
					usrImpStr += "No scheduling for messages."
				}
				usrImpStr += "\n"
			}
			if(getDevMultMod()) {
				usrImpStr += "Multiple modification calls made to the same device by\n"
				int i = 0
				devMultMod.each { m->
					usrImpStr += "" + m + "; "
					i++
					if(i%3==0)
						usrImpStr += "\n"
				}
				usrImpStr += "\n"
			}
			if(getVarArgMod()) {
				usrImpStr += "A Variable value is passed to the device modification call by\n"
				int i = 0
				varArgMod.each { m->
					usrImpStr += "" + m + "; "
					i++
					if(i%3==0)
						usrImpStr += "\n"
				}
				usrImpStr += "\n"
				usrImpStr += "May result in different outcomes.\n"
			}
			if(getDevTimeCond()) {
				usrImpStr += "Device modification call is inside a conditional block that uses time dependent information.\n"
				int i = 0
				devTimeCond.each { m->
					usrImpStr += "" + m + "; "
					i++
					if(i%4==0)
						usrImpStr += "\n"
				}
				usrImpStr += "\n"
			}
			if(getDevEvtCond()) {
				usrImpStr += "Device modification call is inside a conditional block that uses event value information.\n"
				int i = 0
				devEvtCond.each { m->
					usrImpStr += "" + m + "; "
					i++
					if(i%4==0)
						usrImpStr += "\n"
				}
				usrImpStr += "\n"
			}
			if(getDevStatCond()) {
				usrImpStr += "Device modification call is inside a conditional block that uses state information.\n"
				int i = 0
				devStatCond.each { m->
					usrImpStr += "" + m + "; "
					i++
					if(i%4==0)
						usrImpStr += "\n"
				}
				usrImpStr += "\n"
			}
			if(unSchConflict) {
				usrImpStr += "Scheduling and Unschedling conflict between handlers.\n"
				usrImpStr += "H" + unSchH + " is unscheduling a method scheduled in H" + (unSchH%2 + 1) + ".\n"
			}
			
			if(usrImpStr == "") {
				usrImpStr += "USER IMPACT SAFE/NO USER IMPACT\n"
			}
			
		}
		
		void devMultModAdd(Method m, int hInd) {
			String str = "H" + hInd + ": " + m.toString()
			if(!devMultMod.contains(str)) {
				devMultMod.add(str)
			}
		}
		
		void varArgModAdd(Method m, int hInd) {
			String str = "H" + hInd + ": " + m.toString()
			if(!varArgMod.contains(str)) {
				varArgMod.add(str)
			}
		}
		
		void devTimeCondAdd(Method m, int hInd) {
			String str = "H" + hInd + ": " + m.toString()
			if(!devTimeCond.contains(str)) {
				devTimeCond.add(str)
			}
		}
		
		void devEvtCondAdd(Method m, int hInd) {
			String str = "H" + hInd + ": " + m.toString()
			if(!devEvtCond.contains(str)) {
				devEvtCond.add(str)
			}
		}
		
		void devStatCondAdd(Method m, int hInd) {
			String str = "H" + hInd + ": " + m.toString()
			if(!devStatCond.contains(str)) {
				devStatCond.add(str)
			}
		}
		
		@Override
		String toString() {
			
			usrImpFlagChecks()
			
			result += "\n-----USER--IMPACT----------\n"
			
			result += usrImpStr
			
			result += "\n-----STATE--CONSISTENCY-----\n"
			
			result += stateStr
			
			return result
		}
		
	}
	
}
