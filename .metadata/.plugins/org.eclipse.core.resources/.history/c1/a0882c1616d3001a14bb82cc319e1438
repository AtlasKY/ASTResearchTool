

import org.codehaus.groovy.ast.ClassCodeVisitorSupport
import org.codehaus.groovy.ast.ClassNode
import org.codehaus.groovy.ast.MethodNode
import org.codehaus.groovy.ast.*
import org.codehaus.groovy.ast.expr.ArgumentListExpression
import org.codehaus.groovy.ast.expr.BinaryExpression
import org.codehaus.groovy.ast.expr.BooleanExpression
import org.codehaus.groovy.ast.expr.ClosureExpression
import org.codehaus.groovy.ast.expr.ConstantExpression
import org.codehaus.groovy.ast.expr.DeclarationExpression
import org.codehaus.groovy.ast.expr.Expression
import org.codehaus.groovy.ast.expr.MapExpression
import org.codehaus.groovy.ast.expr.MethodCallExpression
import org.codehaus.groovy.ast.expr.NamedArgumentListExpression
import org.codehaus.groovy.ast.expr.PropertyExpression
import org.codehaus.groovy.ast.expr.TupleExpression
import org.codehaus.groovy.ast.expr.VariableExpression
import org.codehaus.groovy.ast.stmt.BlockStatement
import org.codehaus.groovy.ast.stmt.BreakStatement
import org.codehaus.groovy.ast.stmt.EmptyStatement
import org.codehaus.groovy.ast.stmt.ExpressionStatement
import org.codehaus.groovy.ast.stmt.ForStatement
import org.codehaus.groovy.ast.stmt.IfStatement
import org.codehaus.groovy.ast.stmt.ReturnStatement
import org.codehaus.groovy.ast.stmt.Statement
import org.codehaus.groovy.ast.stmt.WhileStatement
import org.codehaus.groovy.ast.Parameter
import org.codehaus.groovy.classgen.GeneratorContext
import org.codehaus.groovy.control.CompilePhase
import org.codehaus.groovy.control.SourceUnit
import org.codehaus.groovy.control.customizers.CompilationCustomizer
import org.codehaus.groovy.tools.shell.util.Logger
import org.codehaus.groovy.transform.GroovyASTTransformation
import org.codehause.groovyx.gpars.*


@GroovyASTTransformation(phase = CompilePhase.SEMANTIC_ANALYSIS)
class CTAnalysisAST extends CompilationCustomizer{	
	
	List handlers
	List devices
	List allDecMeths
	MethodVisitor mv
	Logger log
	
	public CTAnalysisAST(){
		
		super(CompilePhase.SEMANTIC_ANALYSIS)
		
		handlers = new ArrayList<Handler>() //keep as arraylist for now for simplicity
		devices = new ArrayList();
		allDecMeths = new ArrayList();
			 
	}
	
	@Override
	void call(SourceUnit source, GeneratorContext context, ClassNode classNode) {
				
	//	println classNode
		
		allDecMeths = classNode.getAllDeclaredMethods()
		
		mv = new MethodVisitor()
		classNode.visitContents(mv)
		
		getStateVariables(classNode)
		
		summary()
	}
	
	void visitMethodCall(MethodCallExpression mce) {
		mv.visitMethodCallExpression(mce)
	}

	//Caller method for getting handler arguments, state accesses, and event informations usage
	//from the handler code
	void getStateVariables(ClassNode cn) {
		
//		println "-----------------------------------------------------"
		
		//println cn.getAllDeclaredMethods()
		//println "Class Node:" + allDecMeths
		
		handlers.each { hdl->
		//	println "Handler Name: " + hdl.name
			
			MethodNode methN = cn.getDeclaredMethods(hdl.name).get(0)
			 
			methN.getParameters().each { prm->
				hdl.addArg(prm.getName())
			}
			
			handlerMNodeHelper(methN, hdl, cn)
		}
	}
	
	//Helper method to call recursive action for getting state and event information 
	void handlerMNodeHelper(MethodNode mn, Handler hdl, ClassNode cn) {
				
		if(mn!=null) {
		//	println mn.getName()
			
			BlockStatement block = (BlockStatement) mn.getCode()
		
			block.getStatements().each { st ->
			
				stateRecurse(st, hdl, cn)
			}
		}
	}
	
	void stateRecurse(Statement st, Handler hdl, ClassNode cn) {
		
		if(st instanceof BlockStatement) {
			st.getStatements().each { bst->
				stateRecurse(bst, hdl, cn)
			}
		}
		else if(st instanceof IfStatement) {
			Statement est = new ExpressionStatement((Expression)st.getBooleanExpression())
			stateRecurse(est, hdl, cn)
			stateRecurse(st.getIfBlock(), hdl, cn)
			stateRecurse(st.getElseBlock(), hdl, cn)
		}
		else if(st instanceof ExpressionStatement || st instanceof ReturnStatement) {
			Expression exp = st.getExpression()
			
			hdl.args.each { arg->
				if(hdl.args.size()>0 && exp.getText().contains(arg)) {
					hdl.addEvtProp(exp.getText())
				//	println "contain evt "+ exp.getText()
				}
			}
			
			if(exp instanceof MethodCallExpression) {
				def mname = exp.getMethodAsString()
				hdl.addMethodCall(exp)
				if(cn.getDeclaredMethods(mname).size()>0)
					handlerMNodeHelper(cn.getDeclaredMethods(mname).get(0), hdl, cn)
			} 
			else if(exp instanceof BinaryExpression) {
				if(exp.getLeftExpression().text.contains("state")) {
//					println "Write State: " + exp.text
					hdl.addWriteState(exp.getLeftExpression().getText())
				}
				
				if(exp.getRightExpression().text.contains("state")) {
//					println "Read State: " exp.text
					hdl.addReadState(exp.getRightExpression().getText())
				}
			}
			else if(exp instanceof BooleanExpression) {
				Expression xp = exp.getExpression()
				if(xp instanceof MethodCallExpression) {
					def mname = xp.getMethodAsString()
					hdl.addMethodCall(xp)
	//				println "Method Target: " + mname
					if(cn.getDeclaredMethods(mname).size()>0)
						handlerMNodeHelper(cn.getDeclaredMethods(mname).get(0), hdl, cn)
				}
			}
			else if(exp instanceof PropertyExpression) {
				hdl.addReadState(exp.getText())
			}
		}
		
	}
		
	class MethodVisitor extends ClassCodeVisitorSupport{
		
		
		public MethodVisitor( ) {
		}
		
		/*
		@Override
		void visitPropertyExpression(PropertyExpression ve) {
			
			if(ve.getText().contains("state."))
				println ve.getText()
		}
		*/
		/*
		@Override
		void visitBinaryExpression(BinaryExpression bex) {
			if(bex!=null) {
			if(bex.getLeftExpression().text.contains("state")) {
				println "Write State: " + bex.text
			}
			
			if(bex.getRightExpression().text.contains("state")) {
				println "Read State: " bex.text
			}
			}
		}
		*/
		
		@Override
		void visitIfElse(IfStatement ifs) {
		//	println "In Ifelse visitor: " + ifs.toString()
			if(ifs.getIfBlock() instanceof ExpressionStatement) {
				Expression exp = ifs.getIfBlock().getExpression()
				if(exp instanceof MethodCallExpression) {
			//		println "Methodcall exp: " + exp.getMethodAsString()
					visitMethodCallExpression(exp)
				}
			}else {
				BlockStatement bs = (BlockStatement) ifs.getIfBlock()
				bs.getStatements().each { st->
					if(st instanceof ExpressionStatement) {
						Expression exp = st.getExpression()
						if(exp instanceof MethodCallExpression) {
							visitMethodCallExpression(exp)
						}
					}
				}
			}
			if(!ifs.getElseBlock() instanceof EmptyStatement) {
				if(ifs.getIfBlock() instanceof ExpressionStatement) {
					Expression exp = ifs.getIfBlock().getExpression()
					if(exp instanceof MethodCallExpression) {
						visitMethodCallExpression(exp)
					}
				}else {
					bs = (BlockStatement) ifs.getElseBlock()
					bs.getStatements().each { st->
						if(st instanceof ExpressionStatement) {
							Expression exp = st.getExpression()
							if(exp instanceof MethodCallExpression) {
								visitMethodCallExpression(exp)
							}
						}
					}
				}
			}
		}
		
		
		//Visitor for MEthod Call Expressions
		//
		@Override
		public void visitMethodCallExpression(MethodCallExpression mce) {
						
			def mceText
			
			//Store the name of the method called as a string
			if(mce.getMethodAsString() == null)
			{
				mceText = mce.getText()
			}else
				mceText = mce.getMethodAsString()
				
//			println(mceText)
			
			//INPUT METHOD HANDLER
			if(mceText.equals("input")) {

				//if the method has more than zero arguments
				if(mce.getArguments().toList().size() > 0) {
					
					//get the list of arguments
					def args = mce.getArguments()
					
					def dname //device name assoc. w/ the handler
					List dcap = new ArrayList() //device capabilities requested
					def isDevice = false //if the input is a device input or a value/mode input
					
					//for each argument for the input method call
					args.each { arg->
						
						//if argument is a constant expression
						//if it doesn't contain capabilty request and not a map expression, is the name of the input/device variable
						//if it contains capabilty request, then input is a device, store the requested cap in the cap list
						//if input is a device, then create a new device object and add to devices list
						if(arg instanceof ConstantExpression) {
							if(!arg.getText().contains("capability.")) {
								//print "Device Name: "
								dname = arg.getValue()
							}else {
//								print "Device Cap: " 
								isDevice = true
								dcap.add(arg.getValue())
							}							
						} 
					}
					if(isDevice)
						devices.add(new Device(dname, dcap))	
				}
			}
			
			//SUBSCRIPTION HANDLER
			if(mceText.equals("subscribe")) {
				
				List arglist = mce.getArguments().toList()
				
			//	println "Handler Subs: " + mce.getText()
				
				def hname
				def dname
				def ename
				
				if(arglist.get(0) instanceof VariableExpression){
					
					VariableExpression varex = (VariableExpression) arglist.get(0)
					dname = varex.getName()
					//println "Dev Name: "
				
					}
				
				if(arglist.get(1) instanceof ConstantExpression){
					
					ConstantExpression conex = (ConstantExpression) arglist.get(1)
					
					ename = conex.getValue()
				
					}
				
				if(arglist.get(2) instanceof VariableExpression){
					
					VariableExpression varex = (VariableExpression) arglist.get(2)
					
					hname = varex.getName()
				} else if(arglist.get(2) instanceof ConstantExpression) {
					ConstantExpression conex = (ConstantExpression) arglist.get(2)
					
					hname = conex.getValue()
				
				}
				
		//		println "Handler: " + hname + " " + dname + " " + ename
				
				handlerAdder(new Handler(hname, dname, dname + "." + ename))
				
				/*
				if(allDecMeths.contains(hname)) {
					println "Handler Method Node: " + allDecMeths.get(allDecMeths.indexOf(hname))
				}
				*/
				
			}
			
			if(mceText.equals("schedule")) {
//				println "Schedule: " + mce.getArguments()
				List arglist = mce.getArguments().toList()
				
				def hname = ((ConstantExpression) arglist.get(1)).getValue()
				def dname = "Scheduler"
				def ename = "Schedule on " + ((VariableExpression)arglist.get(0)).getName()
				
				handlers.add(new Handler(hname, dname, ename))
				
			}
			
			//recurse on the method expression to get the inner methods	
			super.visitMethodCallExpression(mce)
		}
		
		@Override
		protected SourceUnit getSourceUnit() {
			return null;
		}
	}
	
	//Printer Method
	public void summary() {
		
		println "-------------------------------------------------------"
		
		println "Devices:"
		devices.each{ dev->
			println(dev)
		}
		
		println "-------------------------------------------------------"
		
		println "Handlers: "
		handlers.forEach { hand ->
			println(hand)
		}
		println "-------------------------------------------------------"
		
	}
	
	class Device{
		String devName
		List cap
		
		public Device(String n, List c) {
			devName = n
			cap = new ArrayList()
			cap = c
		}
		
		@Override
		public String toString() {
			return "Device Name: " + devName + " Capability Req: " + cap + ""
		}
	}
	
	public void handlerAdder(Handler hdl) {
		
		if(handlers.contains(hdl)) {
			handlers.get(handlers.indexOf(hdl)).addEvent(hdl.eventTriggers.get(0))
		}else {
			handlers.add(hdl)
		}
		
	}
	
	class Handler{
		
		String name
		String devName
		List args
		List eventTriggers
		List readStates
		List writeStates
		List calledMethods
		List eventProps //what info of the event is used, if used
		
		
		public Handler(String n, String dn, String en) {
			name = n
			devName = dn
			eventTriggers = new ArrayList<String>()
			
			eventTriggers.add(en)
			
			args = new ArrayList<String>()
			
			calledMethods = new ArrayList<Method>()
			eventProps = new ArrayList()
			readStates = new ArrayList()
			writeStates = new ArrayList()
		}
		
		@Override
		boolean equals(Object o) {
			if(o instanceof Handler) {
				return this.name == o.name
			}
		}
		
		//Adds the arg string parameter of the handler call to the arguments list
		void addArg(String arg) {
			args.add(arg)
		}
		
		//Get an expression as string, finds the last index of the argument passed to the handler contained in the string
		//while there are still unprocessed presences of the handler parameter accesses,
		//walks through the string beginning at the last index of the parameter name and adds the chars to a string
		//until it reads a space, =, !, ?, or a closing parenthesis without an opening parenthesis immediately before it
		//adds the constructed string to the list of event properties accessed arraylist if it's not already present
		void addEvtProp(String prop) {
			if(!eventProps.contains(prop)) {
				def evt = ""
				
				def k = prop.length()
				
				args.each { arg-> 
				
					while((k = prop.lastIndexOf(arg, k-1))!= -1) {
						def i = k
						evt = ""
						while(i < prop.size() && (prop.getAt(i)!= " " && 
							((prop.getAt(i-1) != "(")? prop.getAt(i)!= ")":true) && prop.getAt(i)!= "=" && prop.getAt(i)!= "!" 
							&& prop.getAt(i)!= "?")) {
						
							evt = evt + prop.getAt(i)
					//		println "Event Name: " + i +" "+ k + evt
							i++
						}
						if(!eventProps.contains(evt))
							eventProps.add(evt)
					}
					
				}
			}
		}
		
		void addEvent(String evt) {
			eventTriggers.add(evt)
		}
		
		void addReadState(String s) {
			if(!readStates.contains(s))
				readStates.add(s)
		}
		
		void addWriteState(String s) {
			if(!writeStates.contains(s))
				writeStates.add(s)
		}
		
		void addMethodCall(MethodCallExpression mexp) {
			String mName = mexp.getReceiver().getText() + "." + mexp.getMethodAsString()
			Method m = new Method(mName)
			if(mexp.getText().contains("each")) {
				println "For each loop Meth Expression:\n" + mexp
				mexp.getArguments().each { arg->
					if(arg instanceof ClosureExpression) {
						if(arg.getCode() instanceof BlockStatement) {
							BlockStatement bl = arg.getCode()
							println "Block statements: " + bl.getStatements()
							bl.getStatements().each { st->
								println "Statement " + st
								if(st instanceof ExpressionStatement) {
									Expression xp = st.getExpression()
									println "Expression: " + xp
									println "Method arguments: " + m.arguments
									if(xp instanceof MethodCallExpression) {
										m.addArg(xp.getMethodAsString())
										println "MCE"
										addMethodCall(xp)
									}
								}
							}
						}
					}
				}
			}
			if(!calledMethods.contains(mName)) {
				
				m.addArg(mexp.getArguments().getText())
				calledMethods.add(m)
			}
		}
		
		@Override
		public String toString() {
			def state = ""
			def methods = ""
			def triggers = ""
			def evprops = ""
			def nm = "Handler Name: " + name
			nm = nm + "("
			if(args.size()>0) {
				args.each { arg->
					nm = nm + arg
				}
			}
			nm = nm + ")"
			if(eventProps.size()>0) {
				evprops = "\nEvent Info Used: "
				eventProps.each { p->
					evprops = evprops + p + "; "
				}
			}
			if(calledMethods.size()>0) {
				methods = "\nCalled Methods: "
				calledMethods.each { m->
					methods = methods + m + "; "
				}
			}
			if(readStates.size()>0) {
				state = "\nRead States: "
				readStates.each { st->
					state = state + st + "; "
				}
			}
			if(writeStates.size()>0) {
				state = state + "\nWrite States: "
				writeStates.each { st->
					state = state + st + "; "
				}
			}
			if(eventTriggers.size()>0) {
				triggers = "\nEvent Triggers: "
				eventTriggers.each { tr->
					triggers = triggers + tr + "; "
				}
			}
			
			return nm + "\nDevice Name: " + devName + triggers + evprops + methods + state + "\n"
		}
		
		class Method{
			
			String mName
			List arguments
			
			public Method(String n) {
				mName = n
				arguments = new ArrayList<Expression>()
			}
			
			void addArg(Expression argexp) {
				if(argexp instanceof ArgumentListExpression) {
					argexp.each { xp->
						arguments.add(xp)
					}
				}else {
					arguments.add(argexp)
				}
			}
			
			@Override
			boolean equals(Object o) {
				if(o instanceof Method) {
					return this.mName.equals(o.mName)
				}
				else
					false
			}
			
			@Override
			public String toString() {
				String st = mName + "("
				arguments.each { exp->
					st = st + exp.getText()
					if(arguments.size()-arguments.indexOf(exp)-1 > 0) {
						st = st + ", "
					}
				}
				st = st + ")"
				return st
			}
			
		}
	}
	
	}
